from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.state import StatesGroup, State

import logging
from datetime import datetime
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from environs import Env

from automation.management.commands.bot.user_menu import *
from automation.models import *
from automation.management.commands.bot.user_menu import (
    get_times_shedule,
)
from project.settings import LIMIT_USER_IN_TEAM

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d - %(levelname)-8s - %(asctime)s - %(funcName)s - %(name)s - %(message)s'
)

logger = logging.getLogger(__name__)
env: Env = Env()
env.read_env()
bot: Bot = Bot(token=env('TG_BOT_API'), parse_mode='HTML')
router = Router()

class OState(StatesGroup):
    user_name = State()

@router.message(Command(commands=["start"]))
async def start_command_handler(message: Message):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - –¥–æ–±–∞–≤–ª—è—é
    """
    user_id = await sync_to_async(DevmanUser.objects.filter(telegram_id=int(message.from_user.id)).first)()
    if not user_id:
        user_id = DevmanUser(telegram_id=int(message.from_user.id), first_name=message.from_user.first_name)
        await sync_to_async(user_id.save)()
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—á–µ–±–Ω—ã–π –±–æ—Ç DEVMAN', reply_markup=main_menu)
    else:
        if await sync_to_async(ProjectManager.objects.filter(telegram_id=int(message.from_user.id)).first)():
        # —ç—Ç–æ –ü–ú
            await bot.send_message(message.from_user.id,
                                   f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}',
                                   reply_markup=main_menu_pm)

        else: # —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä, –Ω–æ –∑–∞—à–µ–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
            await bot.send_message(message.from_user.id,
                                   f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!!!',
                                   reply_markup=main_menu)


@router.message(F.text == "–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_main_menu(message: Message):
    async for user in DevmanUser.objects.all().order_by('telegram_id'):
        try:
            await bot.send_message(str(user.telegram_id), f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥...')
        except TelegramBadRequest:
            await bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º–º {str(user.telegram_id)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@router.message(F.text == "–û Devman...")
async def create_order(message: Message):
    await message.answer('https://dvmn.org/')

@router.message(F.text == "–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
async def create_order(message: Message):
    await sync_to_async(StudyGroup.objects.all().delete)()
    # await sync_to_async(StudyingTime.objects.all().delete)()
    await message.answer('–£—Å–ø–µ—à–Ω–æ...')

@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
async def create_order(message: Message):
    await message.answer('https://dvmn.org/')

@router.message(F.text == "–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã")
async def create_order(message: Message):
    # –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π, –Ω–æ —Ç–æ–≥–¥–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –í—Ä–µ–º—è –ø–æ –í—ã–±–æ—Ä—É –ü–ú
    # —Ü–∏–∫–ª –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏, –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã
    students_free_time = []
    time_zero = await sync_to_async(StudyingTime.objects.get)(start_time='00:00:00')
    async for student in Student.objects.filter(preferred_time=time_zero):
        students_free_time.append(student)

    async for team in StudyGroup.objects.all():
        members_in_team = await sync_to_async(team.groups.all)()
        free_places = await sync_to_async(members_in_team.count)()
        if free_places >= LIMIT_USER_IN_TEAM: #await sync_to_async(members_in_team.count)() !!!
            await bot.send_message(message.from_user.id, f'{team}\n–£–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ! –ú–µ—Å—Ç - –Ω–µ—Ç !')
        else: #—Ç.–µ. –º–µ—Å—Ç–∞ –µ—Å—Ç—å - –¥–æ–±–∞–≤–ª—è—é
            available_places = LIMIT_USER_IN_TEAM - free_places
            logging.info(f'–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç = {available_places}')
            while students_free_time and available_places > 0: #—Ç.–µ –µ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ã –∏–ª–∏ –º–µ—Å—Ç–∞
                free_student = await sync_to_async(students_free_time.pop)() #If no argument is provided, the last item in the list is removed.
                # —Å—Ç—É–¥–µ–Ω—Ç—É –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –∫–æ–º–∞–Ω–¥—É –∏ –≤—Ä–µ–º—è –µ–º—É —Ç–æ–∂–µ
                await sync_to_async(Student.objects.filter(id=free_student.id).update)(current_group=team, preferred_time=team.call_time_id)
                await bot.send_message(message.from_user.id, f'{team}\n–î–æ–ø–æ–ª–Ω–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º')
                available_places -= 1
    # else:
    #     await bot.send_message(message.from_user.id, f' –í–Ω–∏–º–∞–Ω–∏–µ !\n–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')

    #–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –∫–æ–º–∞–Ω–¥ - —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å —ç—Ç–æ
    if students_free_time:
        await bot.send_message(message.from_user.id, f' –í–Ω–∏–º–∞–Ω–∏–µ ! –û—Å—Ç–∞–ª–∏—Å—å {len(students_free_time)} —á–µ–ª. –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã...')


@router.message(F.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
async def create_team(message: Message):
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∏—Ä—É–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥',
                           reply_markup=get_type_of_commands())

@router.message(F.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–æ–∑–≤–æ–Ω–∞")
async def create_team(message: Message):
    # –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
    curent_user = await sync_to_async(DevmanUser.objects.get)(telegram_id=message.from_user.id)
    if curent_user:
        time_zero = await sync_to_async(StudyingTime.objects.get)(start_time='00:00:00')
        await sync_to_async(Student.objects.filter(id=curent_user.id).update)(current_group=None, preferred_time=time_zero)
        await bot.send_message(message.from_user.id, 'üëå')
    else:
        await bot.send_message(message.from_user.id, '–í—ã –µ—â–µ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç –î–µ–≤–º–∞–Ω')


@router.callback_query(F.data.startswith('level-'))
async def get_level_handler(callback: CallbackQuery):
    # –∞–ª–≥–æ—Ä–∏—Ç–º :
    # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –±—ã–ª–∏ —Ä–∞–Ω–µ–µ
    # –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å id : –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
    # –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º ... –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
    logger.info(f'time handler - {callback.data}')
    student_level = callback.data.split('-')[-1]
    students = []
    await sync_to_async(StudyGroup.objects.all().delete)()
    async for student in Student.objects.all().order_by('preferred_time'):
        students.append(student)

    students = await sync_to_async(Student.objects.all)()
    student_id_time_id_qs = await sync_to_async(students.values_list)('id', 'preferred_time') #–∫–ª—é—á-—ç—Ç–æ id c—Ç—É–¥–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - id –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞
    student_id_time_id = await sync_to_async(dict)(student_id_time_id_qs)

    # —Ü–∏–∫–ª –ø–æ —Å–ª–æ—Ç–∞–º, –∏—Å–∫–ª—é—á–∞—è —Å–ª–æ—Ç-–≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ "–∑–∞–¥–∞—Å—Ç –ü–ú —Å–∞–º", —Ç.–µ. —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —É–∫–∞–∑–∞–Ω–Ω—ã–º
    async for time_slot in StudyingTime.objects.all().order_by('start_time')[1:]:
        # —Ü–∏–∫–ª –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        total_members = 0
        team = None
        students_with_the_same_time = [key for key in student_id_time_id if student_id_time_id[key] == time_slot.id]
        for student_id in students_with_the_same_time:
            if total_members==0:
                team = StudyGroup(name=f"–ö–æ–º–∞–Ω–¥–∞ —É—Ä–æ–≤–Ω—è {student_level} —Å–æ–∑–≤–æ–Ω —Å {time_slot} ", call_time=time_slot)
                await sync_to_async(team.save)()
                await sync_to_async(Student.objects.filter(id=student_id).update)(current_group=team)
                total_members += 1
            else:
                await sync_to_async(Student.objects.filter(id=student_id).update)(current_group=team)
                total_members += 1
                if total_members > LIMIT_USER_IN_TEAM:
                    total_members = 0

    await bot.send_message(callback.from_user.id, '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ...')


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Ä–µ–º—è")
async def choise_time_shedule(message: Message):
     #ODO —Ç—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–µ–Ω–∏–∫, –ø–æ–∫–∞ —ç—Ç–æ–≥–æ –Ω–µ—Ç
     # –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤—ã–±–æ—Ä –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –º–æ–¥–µ–ª—å –£—á–µ–Ω–∏–∫
     # –≤–∑—è—Ç—å –∏–∑ –ë–î –≤—Ä–µ–º—è
     await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π (–ú–°–ö)', reply_markup=await get_times_shedule())


@router.callback_query(F.data.startswith('time_'))
async def get_time_handler(callback: CallbackQuery):
    logger.info(f'time handler - {callback.data}')
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...
    # T.ODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ —É–∂–µ —é–∑–µ—Ä –≤ —Å—Ç—É–¥–µ–Ω—Ç–∞, –∏–Ω–∞—á–µ –Ω–æ–≤—ã–π

    time_shudule_id = callback.data.split('_')[-1]
    if time_shudule_id=='Error':
        await bot.send_message(callback.from_user.id, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º –º–µ–Ω—Ç–æ—Ä–æ–º...")
    else:
        user_name = await sync_to_async(DevmanUser.objects.filter(telegram_id=callback.from_user.id).first)()
        start_time = await sync_to_async(StudyingTime.objects.filter(pk=time_shudule_id).first)()

        info = f'–°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω {datetime.datetime.now()}.\n–£–∫–∞–∑–∞–ª —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è {start_time}'
        # type = 'newbie' —Ç.–∫. —ç—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞—Å—Ç –ü–ú –≤ –∞–¥–º–∏–Ω–∫–µ, –ø–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        student = Student(user=user_name, level='newbie', preferred_time=start_time, info=info)
        await sync_to_async(student.save)()
        await bot.send_message(callback.from_user.id, info)

